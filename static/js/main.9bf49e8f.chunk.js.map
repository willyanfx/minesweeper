{"version":3,"sources":["serviceWorker.ts","types/index.ts","hooks/usePersistedState.ts","contexts/GameContext.tsx","reducer/index.ts","components/Button/index.tsx","components/Cells/index.tsx","hooks/useInterval.ts","components/NumberDisplay/index.tsx","utils/index.ts","constants/index.ts","components/Game/index.tsx","components/Nav/index.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CellValue","CellState","Face","Mode","Theme","Difficult","ActionType","usePersistedState","key","initialState","useState","storageValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","StateContext","createContext","DispatchContext","reducer","action","type","newGame","live","hasLost","hasWin","face","smile","timer","lost","hasWon","payload","Button","col","onClick","onContext","red","row","value","onMouseDown","onMouseUp","disabled","useContext","theme","mode","classes","visible","filter","join","aria-label","className","onContextMenu","bomb","role","data-bomb","none","flagged","Cells","map","rowIndex","cell","colIndex","useInterval","callback","running","savedCallback","useRef","current","id","setInterval","clearInterval","NumberDisplay","toString","padStart","TimerDisplay","time","setTime","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","push","open","bombsPlaced","randomRow","Math","floor","random","randomCol","currentCell","numberOfBombs","Game","bombCounter","setBombCounter","setCells","useReducer","dispatch","showAllBombs","slice","newCells","isABomb","includes","openMultipleCells","safeOpenCellsExists","e","preventDefault","currentCells","oh","Nav","game","React","darkMode","setDarkMode","setTheme","setVisual","classic","Skeuomorph","dark","light","App","setGame","rootRef","document","getElementById","style","background","Provider","args","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bf49e8f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum CellValue {\n    none,\n    one,\n    two,\n    three,\n    four,\n    five,\n    six,\n    seven,\n    eight,\n    bomb,\n}\nexport enum CellState {\n    open,\n    visible,\n    flagged,\n}\nexport type Cell = {\n    value: CellValue;\n    state: CellState;\n    red?: boolean;\n};\n\nexport enum Face {\n    smile = '😁',\n    oh = '😮',\n    lost = '😵',\n    won = '😎',\n}\n\nexport enum Mode {\n    dark = 'dark',\n    light = 'light',\n}\nexport enum Theme {\n    classic = 'classic',\n    Skeuomorph = 'skeuomorph',\n}\nexport enum Difficult {\n    easy = 'easy',\n    medium = 'medium',\n    hard = 'hard',\n}\n\nexport enum ActionType {\n    hasWon = 'HAS_WON',\n    hasLost = 'HAS_LOST',\n    cells = 'CELLS',\n    newGame = 'NEWGAME',\n    live = 'LIVE',\n    face = 'FACE',\n}\n","import { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\ntype Response<T> = [T, Dispatch<SetStateAction<T>>];\n\nfunction usePersistedState<T>(\n    key: string,\n    initialState: T,\n): Response<T> {\n    const [state, setState] = useState(() => {\n        const storageValue = localStorage.getItem(key);\n\n        if (storageValue) {\n            return JSON.parse(storageValue);\n        } else {\n            return initialState;\n        }\n    });\n\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(state));\n    }, [key, state]);\n\n    return [state, setState];\n}\n\nexport default usePersistedState;\n","import React, { createContext } from 'react';\nimport { Mode, Theme } from '../types';\nexport interface IGameContextProps {\n    theme: Theme;\n    mode: Mode;\n}\n\nconst GameContext = createContext<any>([]);\nconst StateContext = createContext<any>({});\nconst DispatchContext = createContext<any>({});\n\nexport { GameContext, StateContext, DispatchContext };\n","import { Cell, Face, ActionType } from '../types';\n\nexport interface IState {\n    face: Face;\n    live: boolean;\n    newGame: boolean;\n    timer: boolean;\n    hasLost: boolean;\n    hasWon: boolean;\n}\n\ninterface IAction {\n    type: ActionType;\n    payload?: boolean | number | Cell[][] | Face;\n}\n\nexport const reducer: React.Reducer<IState, IAction> = (\n    state,\n    action,\n): any => {\n    switch (action.type) {\n        case ActionType.newGame:\n            return {\n                ...state,\n                newGame: true,\n                live: false,\n                hasLost: false,\n                hasWin: false,\n                face: Face.smile,\n                timer: true,\n            };\n        case ActionType.hasLost:\n            return {\n                ...state,\n                hasLost: true,\n                live: false,\n                face: Face.lost,\n            };\n        case ActionType.hasWon:\n            return {\n                ...state,\n                hasWon: true,\n                live: false,\n            };\n        case ActionType.live:\n            return {\n                ...state,\n                live: action.payload,\n                face: Face.smile,\n            };\n        case ActionType.face:\n            return { ...state, face: action.payload };\n        default:\n            return state;\n    }\n};\n","import React, { useContext } from 'react';\nimport './Button.scss';\nimport { CellState, CellValue } from '../../types';\nimport {\n    StateContext,\n} from '../../contexts/GameContext';\n\ninterface ButtonProps {\n    col: number;\n    row: number;\n    red?: boolean;\n    disabled?: boolean;\n    state: CellState;\n    value: CellValue;\n    onClick(\n        rowParam: number,\n        colParam: number,\n    ): (...args: any[]) => void;\n    onMouseDown: (...args: any[]) => void;\n    onMouseUp: (...args: any[]) => void;\n    onContext(\n        rowParam: number,\n        colParam: number,\n    ): (...args: any[]) => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n    col,\n    onClick,\n    onContext,\n    red,\n    row,\n    state,\n    value,\n    onMouseDown,\n    onMouseUp,\n    disabled,\n}) => {\n    const { theme, mode } = useContext(StateContext);\n\n    const renderContent = (): React.ReactNode => {\n        if (state === CellState.visible) {\n            if (value === CellValue.bomb) {\n                return (\n                    <span role=\"img\" data-bomb aria-label=\"bomb\">\n                        💣\n                    </span>\n                );\n            } else if (value === CellValue.none) {\n                return null;\n            }\n\n            return value;\n        } else if (state === CellState.flagged) {\n            return (\n                <span role=\"img\" aria-label=\"flag\">\n                    🚩\n                </span>\n            );\n        }\n\n        return null;\n    };\n\n    const classes = [\n        `${theme}--button`,\n        `${theme}--button-${mode}`,\n        state === CellState.visible\n            ? `${theme}--button-${mode}__visible`\n            : '',\n        `value-${value}`,\n        red ? `${theme}--button-${mode}__red` : '',\n    ]\n        .filter(Boolean)\n        .join(' ');\n\n    return (\n        <button\n            aria-label={`BUTTON row: ${row}, column: ${col}`}\n            className={classes}\n            onClick={onClick(row, col)}\n            onContextMenu={onContext(row, col)}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            disabled={disabled}\n        >\n            {renderContent()}\n        </button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from '../Button';\nimport { Cell } from '../../types';\n\nconst Cells = ({\n    state,\n    onClick,\n    onContext,\n    onMouseDown,\n    onMouseUp,\n    disabled,\n}: any) => {\n    return state.map((row: Cell[], rowIndex: number) => {\n        return row.map((cell, colIndex) => (\n            <Button\n                col={colIndex}\n                disabled={disabled}\n                key={`${rowIndex}-${colIndex}`}\n                onClick={onClick}\n                onContext={onContext}\n                red={cell.red}\n                row={rowIndex}\n                state={cell.state}\n                value={cell.value}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n            />\n        ));\n    });\n};\nexport default Cells;\n","// reference https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useRef, useEffect } from 'react';\n\nfunction useInterval<T>(callback: T, running: boolean) {\n    const savedCallback: any = useRef(null);\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (running) {\n            let id = setInterval(tick, 1000);\n            return () => clearInterval(id);\n        }\n    }, [running]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect, useContext } from 'react';\nimport './NumberDisplay.scss';\nimport useInterval from '../../hooks/useInterval';\nimport { StateContext } from '../../contexts/GameContext';\n\ntype NumberDisplayProps = {\n    value?: number;\n};\ntype TimerDisplayProps = {\n    live: boolean;\n    timer: boolean;\n};\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({\n    value = 10,\n}) => {\n    const { theme, mode } = useContext(StateContext);\n    const classes = [\n        'numberDisplay',\n        `${theme}--numberDisplay`,\n        `${theme}--numberDisplay-${mode}`,\n    ]\n        .filter(Boolean)\n        .join(' ');\n\n    return (\n        <div className={classes}>\n            <span\n                className={`${theme}--numberDisplay-${mode}__numbers`}\n            >\n                {value.toString().padStart(3, '0')}\n            </span>\n        </div>\n    );\n};\n\nconst TimerDisplay: React.FC<TimerDisplayProps> = ({\n    live = false,\n    timer,\n}) => {\n    const [time, setTime] = useState<number>(0);\n\n    useInterval(() => {\n        if (live && time < 999) {\n            setTime(time + 1);\n        }\n    }, live);\n    useEffect(() => {\n        setTime(0);\n    }, [timer]);\n\n    return <NumberDisplay value={time} />;\n};\n\nexport { NumberDisplay, TimerDisplay };\n","import { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from '../constants';\nimport { CellValue, CellState, Cell, Difficult } from '../types';\n\nexport const difficultLevel = (type: Difficult) => {\n    switch (type) {\n        case 'easy':\n            return { cols: 9, rows: 9, numOfBombs: 10 };\n        case 'medium':\n            return { cols: 16, rows: 16, numOfBombs: 40 };\n        case 'easy':\n            return { cols: 30, rows: 99, numOfBombs: 99 };\n        default:\n            return { cols: 8, rows: 8, numOfBombs: 10 };\n    }\n};\n\nconst grabAllAdjacentCells = (\n    cells: Cell[][],\n    rowParam: number,\n    colParam: number,\n): {\n    topLeftCell: Cell | null;\n    topCell: Cell | null;\n    topRightCell: Cell | null;\n    leftCell: Cell | null;\n    rightCell: Cell | null;\n    bottomLeftCell: Cell | null;\n    bottomCell: Cell | null;\n    bottomRightCell: Cell | null;\n} => {\n    const topLeftCell =\n        rowParam > 0 && colParam > 0\n            ? cells[rowParam - 1][colParam - 1]\n            : null;\n    const topCell =\n        rowParam > 0 ? cells[rowParam - 1][colParam] : null;\n    const topRightCell =\n        rowParam > 0 && colParam < MAX_COLS - 1\n            ? cells[rowParam - 1][colParam + 1]\n            : null;\n    const leftCell =\n        colParam > 0 ? cells[rowParam][colParam - 1] : null;\n    const rightCell =\n        colParam < MAX_COLS - 1\n            ? cells[rowParam][colParam + 1]\n            : null;\n    const bottomLeftCell =\n        rowParam < MAX_ROWS - 1 && colParam > 0\n            ? cells[rowParam + 1][colParam - 1]\n            : null;\n    const bottomCell =\n        rowParam < MAX_ROWS - 1\n            ? cells[rowParam + 1][colParam]\n            : null;\n    const bottomRightCell =\n        rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\n            ? cells[rowParam + 1][colParam + 1]\n            : null;\n\n    return {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell,\n    };\n};\n\nexport const generateCells = (): Cell[][] => {\n    let cells: Cell[][] = [];\n    // generating all cells\n    for (let row = 0; row < MAX_ROWS; row++) {\n        cells.push([]);\n        for (let col = 0; col < MAX_COLS; col++) {\n            cells[row].push({\n                value: CellValue.none,\n                state: CellState.open,\n            });\n        }\n    }\n\n    // randomly put 10 bombs\n    let bombsPlaced = 0;\n    while (bombsPlaced < NO_OF_BOMBS) {\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\n\n        const currentCell = cells[randomRow][randomCol];\n        if (currentCell.value !== CellValue.bomb) {\n            cells = cells.map((row, rowIndex) =>\n                row.map((cell, colIndex) => {\n                    if (\n                        randomRow === rowIndex &&\n                        randomCol === colIndex\n                    ) {\n                        return {\n                            ...cell,\n                            value: CellValue.bomb,\n                        };\n                    }\n\n                    return cell;\n                }),\n            );\n            bombsPlaced++;\n        }\n    }\n\n    // calculate the numbers for each cell\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\n            const currentCell = cells[rowIndex][colIndex];\n            if (currentCell.value === CellValue.bomb) {\n                continue;\n            }\n\n            let numberOfBombs = 0;\n            const {\n                topLeftCell,\n                topCell,\n                topRightCell,\n                leftCell,\n                rightCell,\n                bottomLeftCell,\n                bottomCell,\n                bottomRightCell,\n            } = grabAllAdjacentCells(cells, rowIndex, colIndex);\n\n            if (topLeftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (topCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (topRightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (leftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (rightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomLeftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomRightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n\n            if (numberOfBombs > 0) {\n                cells[rowIndex][colIndex] = {\n                    ...currentCell,\n                    value: numberOfBombs,\n                };\n            }\n        }\n    }\n\n    return cells;\n};\n\nexport const openMultipleCells = (\n    cells: Cell[][],\n    rowParam: number,\n    colParam: number,\n): Cell[][] => {\n    const currentCell = cells[rowParam][colParam];\n\n    if (\n        currentCell.state === CellState.visible ||\n        currentCell.state === CellState.flagged\n    ) {\n        return cells;\n    }\n\n    let newCells = cells.slice();\n    newCells[rowParam][colParam].state = CellState.visible;\n\n    const {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell,\n    } = grabAllAdjacentCells(cells, rowParam, colParam);\n\n    if (\n        topLeftCell?.state === CellState.open &&\n        topLeftCell.value !== CellValue.bomb\n    ) {\n        if (topLeftCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam - 1,\n                colParam - 1,\n            );\n        } else {\n            newCells[rowParam - 1][colParam - 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        topCell?.state === CellState.open &&\n        topCell.value !== CellValue.bomb\n    ) {\n        if (topCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam - 1,\n                colParam,\n            );\n        } else {\n            newCells[rowParam - 1][colParam].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        topRightCell?.state === CellState.open &&\n        topRightCell.value !== CellValue.bomb\n    ) {\n        if (topRightCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam - 1,\n                colParam + 1,\n            );\n        } else {\n            newCells[rowParam - 1][colParam + 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        leftCell?.state === CellState.open &&\n        leftCell.value !== CellValue.bomb\n    ) {\n        if (leftCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam,\n                colParam - 1,\n            );\n        } else {\n            newCells[rowParam][colParam - 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        rightCell?.state === CellState.open &&\n        rightCell.value !== CellValue.bomb\n    ) {\n        if (rightCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam,\n                colParam + 1,\n            );\n        } else {\n            newCells[rowParam][colParam + 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        bottomLeftCell?.state === CellState.open &&\n        bottomLeftCell.value !== CellValue.bomb\n    ) {\n        if (bottomLeftCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam + 1,\n                colParam - 1,\n            );\n        } else {\n            newCells[rowParam + 1][colParam - 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        bottomCell?.state === CellState.open &&\n        bottomCell.value !== CellValue.bomb\n    ) {\n        if (bottomCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam + 1,\n                colParam,\n            );\n        } else {\n            newCells[rowParam + 1][colParam].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        bottomRightCell?.state === CellState.open &&\n        bottomRightCell.value !== CellValue.bomb\n    ) {\n        if (bottomRightCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam + 1,\n                colParam + 1,\n            );\n        } else {\n            newCells[rowParam + 1][colParam + 1].state =\n                CellState.visible;\n        }\n    }\n\n    return newCells;\n};\n\nexport function backgroundColor(theme: any) {\n    if (theme.theme === 'classic') {\n        return theme.mode === 'light' ? 'teal' : '#666';\n    } else {\n        return theme.mode === 'light'\n            ? 'linear-gradient(to top, #279EFF  0%, #0086FF 100%)'\n            : 'linear-gradient(135deg, rgba(255,255,255,0.15) 0%, rgba(0,0,0,0.15) 100%), radial-gradient(at top center, rgba(255,255,255,0.40) 0%, rgba(0,0,0,0.40) 120%) #989898';\n    }\n}\n","export const MAX_ROWS = 9;\nexport const MAX_COLS = 9;\nexport const NO_OF_BOMBS = 10;\n","import React, {\n    useState,\n    useReducer,\n    useContext,\n    useEffect,\n} from 'react';\nimport { StateContext } from '../../contexts/GameContext';\nimport { reducer, IState } from '../../reducer';\nimport Cells from '../Cells';\nimport { NumberDisplay, TimerDisplay } from '../NumberDisplay';\nimport { generateCells, openMultipleCells } from '../../utils';\nimport {\n    Cell,\n    CellState,\n    CellValue,\n    Face,\n    ActionType,\n} from '../../types';\nimport { MAX_COLS, MAX_ROWS } from '../../constants';\nimport './Game.scss';\n\ninterface IAction {\n    type: ActionType;\n    payload?: boolean | number | Cell[][] | Face;\n}\n\nconst initialState: IState = {\n    live: false,\n    newGame: true,\n    hasWon: false,\n    hasLost: false,\n    face: Face.smile,\n    timer: false,\n};\n\nconst Game: React.FC = () => {\n    const [bombCounter, setBombCounter] = useState<number>(10);\n    const [cells, setCells] = useState<Cell[][]>(generateCells());\n    const { theme, mode } = useContext(StateContext);\n\n    const [state, dispatch] = useReducer<\n        React.Reducer<IState, IAction>\n    >(reducer, initialState);\n\n    const handleCellClick = (\n        rowParam: number,\n        colParam: number,\n    ) => (): void => {\n        let newCells = cells.slice();\n        if (!state.live) {\n            let isABomb =\n                newCells[rowParam][colParam].value === CellValue.bomb;\n            while (isABomb) {\n                newCells = generateCells();\n                if (\n                    newCells[rowParam][colParam].value !==\n                    CellValue.bomb\n                ) {\n                    isABomb = false;\n                    break;\n                }\n            }\n            dispatch({ type: ActionType.live, payload: true });\n        }\n\n        const currentCell = newCells[rowParam][colParam];\n\n        if (\n            [CellState.flagged, CellState.visible].includes(\n                currentCell.state,\n            )\n        ) {\n            return;\n        }\n\n        if (currentCell.value === CellValue.bomb) {\n            newCells[rowParam][colParam].red = true;\n            newCells = showAllBombs();\n\n            setCells(newCells)\n            dispatch({ type: ActionType.hasLost });\n            return;\n        } else if (currentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam,\n                colParam,\n            );\n        } else {\n            newCells[rowParam][colParam].state = CellState.visible;\n        }\n\n        // Check to see if you have won\n        let safeOpenCellsExists = false;\n        for (let row = 0; row < MAX_ROWS; row++) {\n            for (let col = 0; col < MAX_COLS; col++) {\n                const currentCell = newCells[row][col];\n\n                if (\n                    currentCell.value !== CellValue.bomb &&\n                    currentCell.state === CellState.open\n                ) {\n                    safeOpenCellsExists = true;\n                    break;\n                }\n            }\n        }\n\n        if (!safeOpenCellsExists) {\n            newCells = newCells.map(row =>\n                row.map(cell => {\n                    if (cell.value === CellValue.bomb) {\n                        return {\n                            ...cell,\n                            state: CellState.flagged,\n                        };\n                    }\n                    return cell;\n                }),\n            );\n            dispatch({ type: ActionType.hasWon });\n        }\n\n\n        setCells(newCells)\n\n    };\n\n    const handleCellContext = (\n        rowParam: number,\n        colParam: number,\n    ) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n        e.preventDefault();\n\n        if (state.hasLost || state.hasWon) return;\n\n        const currentCells = cells.slice();\n        const currentCell = cells[rowParam][colParam];\n\n        if (currentCell.state === CellState.visible) {\n            return;\n        } else if (currentCell.state === CellState.open) {\n            currentCells[rowParam][colParam].state =\n                CellState.flagged;\n\n            setCells(currentCells)\n            setBombCounter(bombCounter - 1);\n        } else if (currentCell.state === CellState.flagged) {\n            currentCells[rowParam][colParam].state = CellState.open;\n\n            setCells(currentCells)\n            dispatch({\n                type: ActionType.cells,\n            });\n            setBombCounter(bombCounter + 1);\n        }\n    };\n\n    const handleFaceClick = (): void => {\n\n        setCells(generateCells())\n        dispatch({\n            type: ActionType.newGame\n        });\n    };\n\n    // handle mouse event\n    const handleMouseDown = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => dispatch({ type: ActionType.face, payload: Face.oh });\n\n    const handleMouseUp = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => dispatch({ type: ActionType.face, payload: Face.smile });\n\n    const showAllBombs = (): Cell[][] => {\n        const currentCells = cells.slice();\n        return currentCells.map(row =>\n            row.map(cell => {\n                if (cell.value === CellValue.bomb) {\n                    return {\n                        ...cell,\n                        state: CellState.visible,\n                    };\n                }\n\n                return cell;\n            }),\n        );\n    };\n\n    return (\n        <>\n            <div className=\"result\">\n                {state.hasWon && (<h1>Congrats <span>🎉</span></h1>)}\n                {state.hasLost && (<h1>Game Over <span>😭</span></h1>)}\n            </div>\n            <div className={`game ${theme} ${theme}-${mode}`}>\n                <div\n                    className={`${theme}--header ${theme}--header-${mode}`}\n                >\n                    <NumberDisplay value={bombCounter} />\n                    <button\n                        className={`${theme}--face ${theme}--face-${mode}`}\n                        aria-label=\"start/reset\"\n                        onClick={handleFaceClick}\n                    >\n                        <span role=\"img\">{state.face}</span>\n                    </button>\n                    <TimerDisplay live={state.live} timer={state.timer} />\n                </div>\n                <div className={`${theme}--body ${theme}--body-${mode}`}>\n                    <Cells\n                        disabled={state.hasLost}\n                        state={cells}\n                        onClick={\n                            state.hasLost || state.hasWon\n                                ? () => { }\n                                : handleCellClick\n                        }\n                        onContext={handleCellContext}\n                        onMouseDown={handleMouseDown}\n                        onMouseUp={handleMouseUp}\n                    />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Game;\n","import React, { useContext, useEffect } from 'react';\nimport './Nav.scss';\nimport { Mode, Theme, Difficult } from '../../types';\n\nimport {\n    StateContext,\n    DispatchContext,\n} from '../../contexts/GameContext';\n\nexport default function Nav() {\n    const game = useContext(StateContext);\n    const [darkMode, setDarkMode] = React.useState(game.mode === 'dark' ? false : true);\n    const [theme, setTheme] = React.useState(game.theme);\n    const setVisual = useContext(DispatchContext);\n\n\n\n    function toggleDark() {\n        darkMode === false\n            ? setDarkMode(true)\n            : setDarkMode(false)\n        const mode = darkMode ? Mode.dark : Mode.light;\n        setVisual({ mode });\n    }\n\n    useEffect(() => {\n        setVisual({ theme });\n    }, [theme]);\n\n\n\n    const classes = ['nav',\n        `nav-${game.theme}-${game.mode}`\n    ]\n        .filter(Boolean)\n        .join(' ');\n\n    return (\n        <header className={classes}>\n            <div className=\"logo\">LOGO</div>\n            <div className=\"options\">\n                <button\n                    onClick={() =>\n                        theme === Theme.classic\n                            ? setTheme(Theme.Skeuomorph)\n                            : setTheme(Theme.classic)\n                    }\n                >\n                    {theme}\n                </button>\n                <div\n                    id=\"toggle\"\n                    onClick={toggleDark}\n                >\n                    <div\n                        className={`${darkMode &&\n                            'toggle-active'} toggle-inner`}\n                    />\n                </div>\n            </div>\n        </header>\n    );\n}\n","import React, { useReducer, useRef, useEffect } from 'react';\n\nimport { Mode, Theme, Difficult } from './types';\nimport usePersistedState from './hooks/usePersistedState';\nimport Game from './components/Game';\nimport {\n    GameContext,\n    StateContext,\n    DispatchContext,\n} from './contexts/GameContext';\nimport Nav from './components/Nav';\nimport { backgroundColor } from './utils';\n\nconst initialState = {\n    theme: Theme.classic,\n    mode: Mode.dark,\n};\n\n\nconst App: React.FC = () => {\n    const [game, setGame] = usePersistedState('theme', initialState);\n    const setVisual = ({ ...args }) => {\n        setGame({ ...game, ...args });\n    };\n\n    const rootRef = useRef<HTMLElement>(null!)\n\n    useEffect(() => {\n        if (!rootRef.current) {\n            rootRef.current = document.getElementById(\"root\")!\n        }\n        rootRef.current.style.background = backgroundColor(game) || `grey`;\n    }, [game])\n\n    return (\n        <>\n            <DispatchContext.Provider value={setVisual}>\n                <StateContext.Provider value={game}>\n                    <Nav />\n                    <Game />\n                </StateContext.Provider>\n            </DispatchContext.Provider>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}