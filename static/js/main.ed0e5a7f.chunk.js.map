{"version":3,"sources":["serviceWorker.ts","types/index.ts","components/Button/index.tsx","components/Cells/index.tsx","hooks/useInterval.tsx","components/NumberDisplay/index.tsx","utils/index.ts","constants/index.ts","components/App/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CellValue","CellState","Face","Button","col","onClick","onContext","red","row","state","value","onMouseDown","onMouseUp","aria-label","className","visible","onContextMenu","bomb","role","none","flagged","Cells","useMemo","map","rowIndex","cell","colIndex","key","useInterval","callback","running","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","NumberDisplay","live","gameOver","useState","time","setTime","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","push","open","bombsPlaced","randomRow","Math","floor","random","randomCol","currentCell","numberOfBombs","App","setCells","smile","face","setFace","setLive","bombCounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","lost","won","showAllBombs","slice","newCells","isABomb","includes","openMultipleCells","safeOpenCellsExists","e","preventDefault","currentCells","oh","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed0e5a7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum CellValue {\n    none,\n    one,\n    two,\n    three,\n    four,\n    five,\n    six,\n    seven,\n    eight,\n    bomb,\n}\nexport enum CellState {\n    open,\n    visible,\n    flagged,\n}\nexport type Cell = {\n    value: CellValue;\n    state: CellState;\n    red?: boolean;\n};\n\nexport enum Face {\n    smile = '😁',\n    oh = '😮',\n    lost = '😵',\n    won = '😎',\n}\n","import React from 'react';\nimport './Button.scss';\nimport { CellState, CellValue } from '../../types';\n\ninterface ButtonProps {\n    col: number;\n    row: number;\n    red?: boolean;\n    state: CellState;\n    value: CellValue;\n    onClick(\n        rowParam: number,\n        colParam: number,\n    ): (...args: any[]) => void;\n    onMouseDown: (...args: any[]) => void;\n    onMouseUp: (...args: any[]) => void;\n    onContext(\n        rowParam: number,\n        colParam: number,\n    ): (...args: any[]) => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n    col,\n    onClick,\n    onContext,\n    red,\n    row,\n    state,\n    value,\n    onMouseDown,\n    onMouseUp,\n}) => {\n    const renderContent = (): React.ReactNode => {\n        if (state === CellState.visible) {\n            if (value === CellValue.bomb) {\n                return (\n                    <span role=\"img\" aria-label=\"bomb\">\n                        💣\n                    </span>\n                );\n            } else if (value === CellValue.none) {\n                return null;\n            }\n\n            return value;\n        } else if (state === CellState.flagged) {\n            return (\n                <span role=\"img\" aria-label=\"flag\">\n                    🚩\n                </span>\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <button\n            aria-label={`button-row${row}-column${col}`}\n            className={`Button ${\n                state === CellState.visible ? 'visible' : ''\n            } value-${value} ${red ? 'red' : ''}`}\n            onClick={onClick(row, col)}\n            onContextMenu={onContext(row, col)}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n        >\n            {renderContent()}\n        </button>\n    );\n};\n\nexport default Button;\n","import React, { useMemo } from 'react';\nimport Button from '../Button';\n\nconst Cells = ({\n    state,\n    onClick,\n    onContext,\n    onMouseDown,\n    onMouseUp,\n}: any) => {\n    const renderCells = useMemo(\n        () =>\n            state.map((row: any[], rowIndex: number) => {\n                return row.map((cell, colIndex) => (\n                    <Button\n                        col={colIndex}\n                        key={`${rowIndex}-${colIndex}`}\n                        onClick={onClick}\n                        onContext={onContext}\n                        red={cell.red}\n                        row={rowIndex}\n                        state={cell.state}\n                        value={cell.value}\n                        onMouseDown={onMouseDown}\n                        onMouseUp={onMouseUp}\n                    />\n                ));\n            }),\n        [state],\n    );\n    return renderCells;\n};\nexport default Cells;\n","// reference https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useRef, useEffect } from 'react';\n\nfunction useInterval<T>(callback: T, running: boolean) {\n    const savedCallback: any = useRef(null);\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (running) {\n            let id = setInterval(tick, 1000);\n            return () => clearInterval(id);\n        }\n    }, [running]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from 'react';\nimport './NumberDisplay.scss';\nimport useInterval from '../../hooks/useInterval';\n\ninterface NumberDisplayProps {\n    value?: number;\n    live?: boolean;\n    gameOver?: boolean;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({\n    value,\n    live = false,\n    gameOver,\n}) => {\n    const [time, setTime] = useState<number>(0);\n    useInterval(() => {\n        setTime(time + 1);\n    }, live);\n\n    useEffect(() => {\n        if (gameOver) return;\n        if (live && !gameOver) setTime(0);\n    }, [!live, gameOver]);\n\n    if (value) {\n        return (\n            <div className=\"NumberDisplay\">\n                {value.toString().padStart(3, '0')}\n            </div>\n        );\n    }\n    return (\n        <div className=\"NumberDisplay\">\n            {time.toString().padStart(3, '0')}\n        </div>\n    );\n};\n\nexport default NumberDisplay;\n","import { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from '../constants';\nimport { CellValue, CellState, Cell } from '../types';\nconst grabAllAdjacentCells = (\n    cells: Cell[][],\n    rowParam: number,\n    colParam: number,\n): {\n    topLeftCell: Cell | null;\n    topCell: Cell | null;\n    topRightCell: Cell | null;\n    leftCell: Cell | null;\n    rightCell: Cell | null;\n    bottomLeftCell: Cell | null;\n    bottomCell: Cell | null;\n    bottomRightCell: Cell | null;\n} => {\n    const topLeftCell =\n        rowParam > 0 && colParam > 0\n            ? cells[rowParam - 1][colParam - 1]\n            : null;\n    const topCell =\n        rowParam > 0 ? cells[rowParam - 1][colParam] : null;\n    const topRightCell =\n        rowParam > 0 && colParam < MAX_COLS - 1\n            ? cells[rowParam - 1][colParam + 1]\n            : null;\n    const leftCell =\n        colParam > 0 ? cells[rowParam][colParam - 1] : null;\n    const rightCell =\n        colParam < MAX_COLS - 1\n            ? cells[rowParam][colParam + 1]\n            : null;\n    const bottomLeftCell =\n        rowParam < MAX_ROWS - 1 && colParam > 0\n            ? cells[rowParam + 1][colParam - 1]\n            : null;\n    const bottomCell =\n        rowParam < MAX_ROWS - 1\n            ? cells[rowParam + 1][colParam]\n            : null;\n    const bottomRightCell =\n        rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\n            ? cells[rowParam + 1][colParam + 1]\n            : null;\n\n    return {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell,\n    };\n};\n\nexport const generateCells = (): Cell[][] => {\n    let cells: Cell[][] = [];\n\n    // generating all cells\n    for (let row = 0; row < MAX_ROWS; row++) {\n        cells.push([]);\n        for (let col = 0; col < MAX_COLS; col++) {\n            cells[row].push({\n                value: CellValue.none,\n                state: CellState.open,\n            });\n        }\n    }\n\n    // randomly put 10 bombs\n    let bombsPlaced = 0;\n    while (bombsPlaced < NO_OF_BOMBS) {\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\n\n        const currentCell = cells[randomRow][randomCol];\n        if (currentCell.value !== CellValue.bomb) {\n            cells = cells.map((row, rowIndex) =>\n                row.map((cell, colIndex) => {\n                    if (\n                        randomRow === rowIndex &&\n                        randomCol === colIndex\n                    ) {\n                        return {\n                            ...cell,\n                            value: CellValue.bomb,\n                        };\n                    }\n\n                    return cell;\n                }),\n            );\n            bombsPlaced++;\n        }\n    }\n\n    // calculate the numbers for each cell\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\n            const currentCell = cells[rowIndex][colIndex];\n            if (currentCell.value === CellValue.bomb) {\n                continue;\n            }\n\n            let numberOfBombs = 0;\n            const {\n                topLeftCell,\n                topCell,\n                topRightCell,\n                leftCell,\n                rightCell,\n                bottomLeftCell,\n                bottomCell,\n                bottomRightCell,\n            } = grabAllAdjacentCells(cells, rowIndex, colIndex);\n\n            if (topLeftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (topCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (topRightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (leftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (rightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomLeftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomRightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n\n            if (numberOfBombs > 0) {\n                cells[rowIndex][colIndex] = {\n                    ...currentCell,\n                    value: numberOfBombs,\n                };\n            }\n        }\n    }\n\n    return cells;\n};\n\nexport const openMultipleCells = (\n    cells: Cell[][],\n    rowParam: number,\n    colParam: number,\n): Cell[][] => {\n    const currentCell = cells[rowParam][colParam];\n\n    if (\n        currentCell.state === CellState.visible ||\n        currentCell.state === CellState.flagged\n    ) {\n        return cells;\n    }\n\n    let newCells = cells.slice();\n    newCells[rowParam][colParam].state = CellState.visible;\n\n    const {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell,\n    } = grabAllAdjacentCells(cells, rowParam, colParam);\n\n    if (\n        topLeftCell?.state === CellState.open &&\n        topLeftCell.value !== CellValue.bomb\n    ) {\n        if (topLeftCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam - 1,\n                colParam - 1,\n            );\n        } else {\n            newCells[rowParam - 1][colParam - 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        topCell?.state === CellState.open &&\n        topCell.value !== CellValue.bomb\n    ) {\n        if (topCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam - 1,\n                colParam,\n            );\n        } else {\n            newCells[rowParam - 1][colParam].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        topRightCell?.state === CellState.open &&\n        topRightCell.value !== CellValue.bomb\n    ) {\n        if (topRightCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam - 1,\n                colParam + 1,\n            );\n        } else {\n            newCells[rowParam - 1][colParam + 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        leftCell?.state === CellState.open &&\n        leftCell.value !== CellValue.bomb\n    ) {\n        if (leftCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam,\n                colParam - 1,\n            );\n        } else {\n            newCells[rowParam][colParam - 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        rightCell?.state === CellState.open &&\n        rightCell.value !== CellValue.bomb\n    ) {\n        if (rightCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam,\n                colParam + 1,\n            );\n        } else {\n            newCells[rowParam][colParam + 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        bottomLeftCell?.state === CellState.open &&\n        bottomLeftCell.value !== CellValue.bomb\n    ) {\n        if (bottomLeftCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam + 1,\n                colParam - 1,\n            );\n        } else {\n            newCells[rowParam + 1][colParam - 1].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        bottomCell?.state === CellState.open &&\n        bottomCell.value !== CellValue.bomb\n    ) {\n        if (bottomCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam + 1,\n                colParam,\n            );\n        } else {\n            newCells[rowParam + 1][colParam].state =\n                CellState.visible;\n        }\n    }\n\n    if (\n        bottomRightCell?.state === CellState.open &&\n        bottomRightCell.value !== CellValue.bomb\n    ) {\n        if (bottomRightCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam + 1,\n                colParam + 1,\n            );\n        } else {\n            newCells[rowParam + 1][colParam + 1].state =\n                CellState.visible;\n        }\n    }\n\n    return newCells;\n};\n","export const MAX_ROWS = 9;\nexport const MAX_COLS = 9;\nexport const NO_OF_BOMBS = 10;\n","import React, { useEffect, useState, useMemo } from 'react';\n\nimport Cells from '../Cells';\nimport NumberDisplay from '../NumberDisplay';\nimport { generateCells, openMultipleCells } from '../../utils';\nimport { Cell, CellState, CellValue, Face } from '../../types';\nimport { MAX_COLS, MAX_ROWS } from '../../constants';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n    const [cells, setCells] = useState<Cell[][]>(generateCells());\n    const [face, setFace] = useState<Face>(Face.smile);\n    const [live, setLive] = useState<boolean>(false);\n    const [bombCounter, setBombCounter] = useState<number>(10);\n    const [hasLost, setHasLost] = useState<boolean>(false);\n    const [hasWon, setHasWon] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (hasLost) {\n            setLive(false);\n            setFace(Face.lost);\n        }\n    }, [hasLost]);\n\n    useEffect(() => {\n        if (hasWon) {\n            setLive(false);\n            setFace(Face.won);\n        }\n    }, [hasWon]);\n\n    const handleCellClick = (\n        rowParam: number,\n        colParam: number,\n    ) => (): void => {\n        let newCells = cells.slice();\n\n        if (hasLost) return;\n        // start the game\n        if (!live) {\n            let isABomb =\n                newCells[rowParam][colParam].value === CellValue.bomb;\n            while (isABomb) {\n                newCells = generateCells();\n                if (\n                    newCells[rowParam][colParam].value !==\n                    CellValue.bomb\n                ) {\n                    isABomb = false;\n                    break;\n                }\n            }\n            setLive(true);\n        }\n\n        const currentCell = newCells[rowParam][colParam];\n\n        if (\n            [CellState.flagged, CellState.visible].includes(\n                currentCell.state,\n            )\n        ) {\n            return;\n        }\n\n        if (currentCell.value === CellValue.bomb) {\n            setHasLost(true);\n            newCells[rowParam][colParam].red = true;\n            newCells = showAllBombs();\n            setCells(newCells);\n            return;\n        } else if (currentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n                newCells,\n                rowParam,\n                colParam,\n            );\n        } else {\n            newCells[rowParam][colParam].state = CellState.visible;\n        }\n\n        // Check to see if you have won\n        let safeOpenCellsExists = false;\n        for (let row = 0; row < MAX_ROWS; row++) {\n            for (let col = 0; col < MAX_COLS; col++) {\n                const currentCell = newCells[row][col];\n\n                if (\n                    currentCell.value !== CellValue.bomb &&\n                    currentCell.state === CellState.open\n                ) {\n                    safeOpenCellsExists = true;\n                    break;\n                }\n            }\n        }\n\n        if (!safeOpenCellsExists) {\n            newCells = newCells.map(row =>\n                row.map(cell => {\n                    if (cell.value === CellValue.bomb) {\n                        return {\n                            ...cell,\n                            state: CellState.flagged,\n                        };\n                    }\n                    return cell;\n                }),\n            );\n            setHasWon(true);\n        }\n\n        setCells(newCells);\n    };\n\n    const handleCellContext = (\n        rowParam: number,\n        colParam: number,\n    ) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n        e.preventDefault();\n\n        if (!live) {\n            return;\n        }\n\n        const currentCells = cells.slice();\n        const currentCell = cells[rowParam][colParam];\n\n        if (currentCell.state === CellState.visible) {\n            return;\n        } else if (currentCell.state === CellState.open) {\n            currentCells[rowParam][colParam].state =\n                CellState.flagged;\n            setCells(currentCells);\n            setBombCounter(bombCounter - 1);\n        } else if (currentCell.state === CellState.flagged) {\n            currentCells[rowParam][colParam].state = CellState.open;\n            setCells(currentCells);\n            setBombCounter(bombCounter + 1);\n        }\n    };\n\n    const handleFaceClick = (): void => {\n        setLive(false);\n        setFace(Face.smile);\n        setCells(generateCells());\n        setHasLost(false);\n        setHasWon(false);\n    };\n\n    // handle mouse event\n    const handleMouseDown = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => {\n        if (hasLost) return;\n        setFace(Face.oh);\n    };\n    const handleMouseUp = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => {\n        if (hasLost) return;\n        setFace(Face.smile);\n    };\n\n    const showAllBombs = (): Cell[][] => {\n        const currentCells = cells.slice();\n        return currentCells.map(row =>\n            row.map(cell => {\n                if (cell.value === CellValue.bomb) {\n                    return {\n                        ...cell,\n                        state: CellState.visible,\n                    };\n                }\n\n                return cell;\n            }),\n        );\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"Header\">\n                <NumberDisplay value={bombCounter} />\n                <button\n                    className=\"Face\"\n                    aria-label=\"start/reset\"\n                    onClick={handleFaceClick}\n                >\n                    <span role=\"img\">{face}</span>\n                </button>\n                <NumberDisplay live={live} gameOver={hasLost} />\n            </div>\n            <div className=\"Body\">\n                <Cells\n                    state={cells}\n                    onClick={handleCellClick}\n                    onContext={handleCellContext}\n                    onMouseDown={handleMouseDown}\n                    onMouseUp={handleMouseUp}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}